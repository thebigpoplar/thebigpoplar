<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>async/await 怎么更优雅的处理报错</title>
      <link href="/2023/03/09/async-await/"/>
      <url>/2023/03/09/async-await/</url>
      
        <content type="html"><![CDATA[<h2 id="Promise封装请求"><a href="#Promise封装请求" class="headerlink" title="Promise封装请求"></a>Promise封装请求</h2><p>一般我们在使用Promise链式调用会显得代码不那么优雅，如果出现嵌套的问题，可读性较就会很差。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 封装请求函数</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">request</span> = (<span class="params">url, params</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// ...do something</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用时</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">handleLogin</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="title function_">request</span>(</span><br><span class="line">    <span class="string">&#x27;/basic/login&#x27;</span>,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">usename</span>: <span class="string">&#x27;yangfan&#x27;</span>,</span><br><span class="line">      <span class="attr">password</span>: <span class="string">&#x27;123456&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// success do something</span></span><br><span class="line">  &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// fail do something</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>promise reject catch</strong> 错误处理：<strong>async</strong>函数返回一个<strong>Promise对象</strong>，其内部抛出错误，会导致返回的<strong>Promise对象</strong>变为<strong>reject状态</strong>，可以通过<strong>catch</strong>函数进行错误兜底。</p><h2 id="async-x2F-await"><a href="#async-x2F-await" class="headerlink" title="async&#x2F;await"></a>async&#x2F;await</h2><p>async&#x2F;await他的作用是：用同步的方式执行异步操作</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">handleLogin</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">request</span>(<span class="string">&#x27;/basic/login&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">usename</span>: <span class="string">&#x27;yangfan&#x27;</span>,</span><br><span class="line">    <span class="attr">password</span>: <span class="string">&#x27;123456&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> info = <span class="keyword">await</span> <span class="title function_">request</span>(<span class="string">&#x27;/basic/getuserinfo&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">id</span>: res.<span class="property">id</span></span><br><span class="line">  &#125;)</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">setUserInfo</span>(info)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">| 错误处理：通过try...catch 将await错误包裹在try...catch代码块中，进行异常捕获。</span><br></pre></td></tr></table></figure><h2 id="await-to-js"><a href="#await-to-js" class="headerlink" title="await-to-js"></a>await-to-js</h2><p>await-to-js 已经帮我们做了这件事，我们可以看看它是怎么做的，它的源码只有短短十几行，我们应该读读它的源码，学学它的思想。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type"> Promise </span>&#125; 传进去的请求函数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type"> Object= </span>&#125; <span class="variable">errorExt</span> - 拓展错误对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type"> Promise </span>&#125; 返回一个Promise</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">to</span>(<span class="params"></span></span><br><span class="line"><span class="params">  promise,</span></span><br><span class="line"><span class="params">  errorExt</span></span><br><span class="line"><span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> promise</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> [<span class="literal">null</span>, data])</span><br><span class="line">    .<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (errorExt) &#123;</span><br><span class="line">        <span class="keyword">const</span> parsedError = <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, err, errorExt)</span><br><span class="line">        <span class="keyword">return</span> [parsedError, <span class="literal">undefined</span>]</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> [err, <span class="literal">undefined</span>]</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> to;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="简单使用："><a href="#简单使用：" class="headerlink" title="简单使用："></a>简单使用：</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">handleLogin</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> [resErr, res] = <span class="keyword">await</span> <span class="title function_">to</span>(<span class="title function_">request</span>(<span class="string">&#x27;/basic/login&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">usename</span>: <span class="string">&#x27;yangfan&#x27;</span>,</span><br><span class="line">    <span class="attr">password</span>: <span class="string">&#x27;123456&#x27;</span></span><br><span class="line">  &#125;))</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (resErr) &#123;</span><br><span class="line">    <span class="comment">// fail do somthing</span></span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> [userErr, info] = <span class="keyword">await</span> <span class="title function_">to</span>(<span class="title function_">request</span>(<span class="string">&#x27;/basic/getuserinfo&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">id</span>: res.<span class="property">id</span></span><br><span class="line">  &#125;))</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (userErr) &#123;</span><br><span class="line">    <span class="comment">// fail do somthing</span></span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">setUserInfo</span>(init);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>源码总结</strong>：to 函数返回一个 Promise 且值是一个数组，数组之中有两个元素，如果索引为0的元素不为空值，说明该请求报错，如果索引0的元素为空值说明该请求没有报错，也就是成功。</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Js小技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 踩坑 —— 使用 Array.fill( ) 填充对象导致的重大问题</title>
      <link href="/2023/03/03/js-array-fill/"/>
      <url>/2023/03/03/js-array-fill/</url>
      
        <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">| JavaScript创建二维数组时尽量不要使用Array.fill( )的嵌套方式</span><br></pre></td></tr></table></figure><h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>在公司在做 code review 中 直接写了 let list &#x3D; [[ ], [ ],[ ]] 是不很优雅，于是在后面的改动直接写成了 Array(4).fill([]) 发现了Array.fill()的问题。</p><h4 id="问题复现："><a href="#问题复现：" class="headerlink" title="问题复现："></a>问题复现：</h4><p>当我们想使用 Array.fill( ) 来填充一个全是对象的数组时需要特别注意，Array(5).fill([]) 这样填充创建的数组，里面每一项[]是完全相同的。 </p><img src="/2023/03/03/js-array-fill/array-fill.png" class="" title="本地图片"><h4 id="修改前："><a href="#修改前：" class="headerlink" title="修改前："></a>修改前：</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> list;</span><br><span class="line"><span class="title function_">swich</span>(<span class="params">type</span>) &#123;</span><br><span class="line">   <span class="keyword">case</span> <span class="string">&#x27;large&#x27;</span>: &#123;</span><br><span class="line">       list = [[],[],[],[],[],[],[]]</span><br><span class="line">       <span class="keyword">break</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">case</span> <span class="string">&#x27;small&#x27;</span>: &#123;</span><br><span class="line">       list = [[],[],[],[],[]]</span><br><span class="line">       <span class="keyword">break</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="attr">default</span>: &#123;</span><br><span class="line">        list = [[],[],[],[]]</span><br><span class="line">       list = <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="title class_">Array</span>(<span class="number">5</span>),<span class="function">() =&gt;</span> <span class="title class_">Array</span>())</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="修改后："><a href="#修改后：" class="headerlink" title="修改后："></a>修改后：</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> list;</span><br><span class="line"><span class="title function_">swich</span>(<span class="params">type</span>) &#123;</span><br><span class="line">   <span class="keyword">case</span> <span class="string">&#x27;large&#x27;</span>: &#123;</span><br><span class="line">       list = <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="title class_">Array</span>(<span class="number">7</span>),<span class="function">() =&gt;</span> <span class="title class_">Array</span>())</span><br><span class="line">       <span class="keyword">break</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">case</span> <span class="string">&#x27;small&#x27;</span>: &#123;</span><br><span class="line">       list = <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="title class_">Array</span>(<span class="number">4</span>),<span class="function">() =&gt;</span> <span class="title class_">Array</span>())</span><br><span class="line">       <span class="keyword">break</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="attr">default</span>: &#123;</span><br><span class="line">       list = <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="title class_">Array</span>(<span class="number">5</span>),<span class="function">() =&gt;</span> <span class="title class_">Array</span>())</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Array-fill-定义"><a href="#Array-fill-定义" class="headerlink" title="Array.fill( ) 定义"></a>Array.fill( ) 定义</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fill() 方法用静态值填充数组中的指定元素。</span><br><span class="line">您可以指定开始和结束填充的位置。如果未指定，则将填充所有元素。</span><br><span class="line"></span><br><span class="line">|注：fill() 会覆盖原始数组。</span><br></pre></td></tr></table></figure><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">array.<span class="title function_">fill</span>(value, start, end)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. value 必需。用于填充数组的值。</span></span><br><span class="line"><span class="comment">// 2. start 可选。开始填充数组的索引（默认为 0）。</span></span><br><span class="line"><span class="comment">// 3. end 可选。停止填充数组的索引（默认为 array.length）。</span></span><br></pre></td></tr></table></figure><h3 id="推荐写法"><a href="#推荐写法" class="headerlink" title="推荐写法"></a>推荐写法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> row = <span class="number">5</span>, col = <span class="number">1</span>  <span class="comment">// 5行1列</span></span><br><span class="line"><span class="comment">// 推荐写法</span></span><br><span class="line"><span class="keyword">const</span> arr1 = <span class="title class_">Array</span>.<span class="title function_">from</span>( <span class="title class_">Array</span>(row), <span class="function">() =&gt;</span>  <span class="title class_">Array</span>(col))</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr2 = <span class="title class_">Array</span>(row).<span class="title function_">fill</span>(<span class="number">0</span>).<span class="title function_">map</span>(<span class="function"><span class="params">x</span> =&gt;</span> <span class="title class_">Array</span>(col).<span class="title function_">fill</span>(<span class="number">0</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 踩坑 </tag>
            
            <tag> Js小技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript 之 url转义encodeURI()、encodeURIComponent()和escape()</title>
      <link href="/2023/03/03/url-encode/"/>
      <url>/2023/03/03/url-encode/</url>
      
        <content type="html"><![CDATA[<p>当URL的参数中出现诸如+，空格，&#x2F;，?，%，#，&amp;，&#x3D;等特殊字符串符号时，因为上述字符有特殊含义，导致服务器端无法正确解析参数，如何处理？解决办法：将这些字符转化成服务器可以识别的字符。</p><img src="/2023/03/03/url-encode/640.png" class="" title="本地图片"><h2 id="一-encodeURI"><a href="#一-encodeURI" class="headerlink" title="一. encodeURI()"></a>一. encodeURI()</h2><p>把字符串作为 URI整体进行编码，所以URI组件中的特殊分隔符号 (;&#x2F;:@&amp;&#x3D;+$?#） (可以使用 encodeURIComponent() 方法分别对特殊含义的 ASCII 标点符号进行编码。)，encodeURI() 函数不会进行转义。该方法不会对 ASCII 字母和数字进行编码，也不会对这些 ASCII 标点符号进行编码：- _ . ! ~ * ‘ ( ) 。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">encodeURI</span>(<span class="string">&#x27;#&#x27;</span>) <span class="comment">// &#x27;#&#x27;</span></span><br><span class="line"><span class="built_in">encodeURI</span>(<span class="string">&#x27;_&#x27;</span>) <span class="comment">// &#x27;_&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">encodeURI</span>(<span class="string">&#x27;https://mp.weixin.qq.com/&#x27;</span>)</span><br><span class="line"><span class="comment">// 输出：&#x27;https://mp.weixin.qq.com/&#x27;</span></span><br><span class="line"><span class="built_in">encodeURI</span>(<span class="string">&#x27;https://mp.weixin.qq.com/cgi-bin/appmsg?t=media/appmsg_edit_v2&#x27;</span>)</span><br><span class="line"><span class="comment">// &#x27;https://mp.weixin.qq.com/cgi-bin/appmsg?t=media/appmsg_edit_v2&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="二-encodeURIComponent"><a href="#二-encodeURIComponent" class="headerlink" title="二. encodeURIComponent()"></a>二. encodeURIComponent()</h2><p>把字符串作为 URI 组件的一部分（如path&#x2F;query&#x2F;fragment等）进行编码，所以用于分隔 URI 各个部分的特殊分隔符号（;&#x2F;?:@&amp;&#x3D;+$,#）也会被转义。返回值中某些字符将被十六进制的转义序列替换。该方法也不会对 ASCII 字母和数字进行编码，也不会对这些 ASCII 标点符号进行编码：- _ . ! ~ * ‘ ( ) 。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">encodeURIComponent</span>(<span class="string">&#x27;;&#x27;</span>) <span class="comment">// &#x27;%3B&#x27;</span></span><br><span class="line"><span class="built_in">encodeURIComponent</span>(<span class="string">&#x27;#&#x27;</span>) <span class="comment">// &#x27;%23&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">encodeURIComponent</span>(<span class="string">&#x27;https://mp.weixin.qq.com/cgi-bin/appmsg?t=media/appmsg_edit_v2&#x27;</span>)</span><br><span class="line"><span class="comment">// &#x27;https%3A%2F%2Fmp.weixin.qq.com%2Fcgi-bin%2Fappmsg%3Ft%3Dmedia%2Fappmsg_edit_v2&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="三-decodeURI-x2F-decodeURIComponent"><a href="#三-decodeURI-x2F-decodeURIComponent" class="headerlink" title="三. decodeURI()&#x2F;decodeURIComponent()"></a>三. decodeURI()&#x2F;decodeURIComponent()</h2><p>decodeURI() 函数可对 encodeURI() 函数编码过的 URI 进行解码。<br>decodeURIComponent() 函数可对 encodeURIComponent() 函数编码的 URI 进行解码。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">decodeURI</span>(<span class="string">&#x27;https://mp.weixin.qq.com/&#x27;</span>)</span><br><span class="line"><span class="comment">// &#x27;https://mp.weixin.qq.com/&#x27;</span></span><br><span class="line"><span class="built_in">decodeURI</span>(<span class="string">&#x27;https://mp.weixin.qq.com/cgi-bin/appmsg?t=media/appmsg_edit_v2&#x27;</span>)</span><br><span class="line"><span class="comment">// &#x27;https%3A%2F%2Fmp.weixin.qq.com%2Fcgi-bin%2Fappmsg%3Ft%3Dmedia%2Fappmsg_edit_v2&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">decodeURIComponent</span>(<span class="string">&#x27;%3B&#x27;</span>) <span class="comment">// &#x27;;&#x27;</span></span><br><span class="line"><span class="built_in">decodeURIComponent</span>(<span class="string">&#x27;%23&#x27;</span>) <span class="comment">// &#x27;#&#x27;</span></span><br><span class="line"><span class="built_in">encodeURIComponent</span>(<span class="string">&#x27;https%3A%2F%2Fmp.weixin.qq.com%2Fcgi-bin%2Fappmsg%3Ft%3Dmedia%2Fappmsg_edit_v2&#x27;</span>)</span><br><span class="line"><span class="comment">// https://mp.weixin.qq.com/cgi-bin/appmsg?t=media/appmsg_edit_v2</span></span><br></pre></td></tr></table></figure><h2 id="四-escape"><a href="#四-escape" class="headerlink" title="四. escape()"></a>四. escape()</h2><p>用于对字符串进行编码，并返回编码字符串。但目前已不推荐使用该函数对URI进行编码。<em>（已经弃用）</em></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">decodeURI</span>(<span class="string">&#x27;https://mp.weixin.qq.com/&#x27;</span>)</span><br><span class="line"><span class="comment">// &#x27;https://mp.weixin.qq.com/&#x27;</span></span><br><span class="line"><span class="built_in">decodeURI</span>(<span class="string">&#x27;https://mp.weixin.qq.com/cgi-bin/appmsg?t=media/appmsg_edit_v2&#x27;</span>)</span><br><span class="line"><span class="comment">// &#x27;https%3A%2F%2Fmp.weixin.qq.com%2Fcgi-bin%2Fappmsg%3Ft%3Dmedia%2Fappmsg_edit_v2&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">decodeURIComponent</span>(<span class="string">&#x27;%3B&#x27;</span>) <span class="comment">// &#x27;;&#x27;</span></span><br><span class="line"><span class="built_in">decodeURIComponent</span>(<span class="string">&#x27;%23&#x27;</span>) <span class="comment">// &#x27;#&#x27;</span></span><br><span class="line"><span class="built_in">encodeURIComponent</span>(<span class="string">&#x27;https%3A%2F%2Fmp.weixin.qq.com%2Fcgi-bin%2Fappmsg%3Ft%3Dmedia%2Fappmsg_edit_v2&#x27;</span>)</span><br><span class="line"><span class="comment">// https://mp.weixin.qq.com/cgi-bin/appmsg?t=media/appmsg_edit_v2</span></span><br></pre></td></tr></table></figure><h2 id="问题思考"><a href="#问题思考" class="headerlink" title="问题思考"></a>问题思考</h2><p><strong>在项目中哪里会用到呢？</strong><br>假如你要给后端传一个16进制 HEX值（#FFFFFF），那么你就会用到encodeURIComponent去转义。</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> URL </tag>
            
            <tag> 基础知识 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
